#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Sep  6 15:53:06 2019

@author: egeerdem
"""
from mpl_toolkits.mplot3d import Axes3D

import time
from scipy.io.wavfile import read, write
import numpy as np
from scipy.special import sph_harm, spherical_jn
from scipy import signal
import pickle
from sphericals import spherical_bn
import functions3 as ff
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

def cart2sph(xyz):
    """ converting a multiple row vector matrix from cartesian to spherical coordinates """
    c = np.zeros((xyz.shape[0],2))
    
    for i in range(xyz.shape[0]):
        
        
        x       = xyz[i][0]
        y       = xyz[i][1]
        z       = xyz[i][2]
        
        r      =  np.sqrt(x*x + y*y + z*z)
        theta   =  np.arccos(z/r)
        phi     =  np.arctan2(y,x)
        c[i][0] = theta
        c[i][1] = phi    
        
    return [c]

# loudspekaer vectors 
#  2 pentagon layered 10 loudspeakers, look at the paper for the specific array 
file = open("L","rb")
L = pickle.load(file)
file.close()
L[abs(L) < 1e-8 ] = 0

L_ra = 0.155*L # loudspeaker coordinates (as row vectors) as if they are at a 15.5cm virtual spherical surface
L_ra_sph = cart2sph(L_ra)

#unit loudspeaker vectors
L_ra_unit = np.array([L_ra[i]/np.linalg.norm(L_ra[i]) for i in range(len(L_ra))])
L_ra_sph = L_ra_sph[0]

teta_ls = L_ra_sph[:,0]
phi_ls = L_ra_sph[:,1]

rc = 0.155

# =============================================================================
L_ra = L_ra_unit
labels = ['1', '2', '3', '4', '5', '6','7','8','9','10']
x = 4*L_ra[:,0]
y = 4*L_ra[:,1]
z = 4*L_ra[:,2]


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(x, y, z)

#give the labels to each point
for x_label, y_label, z_label, label in zip(x, y, z, labels):
    ax.text(x_label, y_label, z_label, label)

teta_q = np.array([69.0, 90.0, 111.0, 90.0, 32.0, 55.0,
                       90.0, 125.0, 148.0, 125.0, 90.0, 55.0, 21.0, 58.0,
                       121.0, 159.0, 69.0, 90.0, 111.0, 90.0, 32.0, 55.0,
                       90.0, 125.0, 148.0, 125.0, 90.0, 55.0, 21.0, 58.0,
                       122.0, 159.0]) / 180.0 * np.pi

phi_q = np.array([0.0, 32.0, 0.0, 328.0, 0.0, 45.0, 69.0, 45.0, 0.0, 315.0,
                     291.0, 315.0, 91.0, 90.0, 90.0, 89.0, 180.0, 212.0, 180.0, 148.0, 180.0,
                     225.0, 249.0, 225.0, 180.0, 135.0, 111.0, 135.0, 269.0, 270.0, 270.0,
                     271.0]) 

phi_q = (phi_q+90)/180.0 * np.pi

label = ['1', '2', '3', '4', '5', '6','7','8','9','10','11','12','13','14','15','16',
         '17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32']

X = np.sin(teta_q) * np.cos(phi_q)
Y = np.sin(teta_q) * np.sin(phi_q)
Z = np.cos(teta_q)

ax.scatter(X, Y, Z)

for x_label, y_label, z_label, label in zip(X, Y, Z, label):
    ax.text(x_label, y_label, z_label, label)
    
plt.title("LS Layout")
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')

plt.show()

# =============================================================================
